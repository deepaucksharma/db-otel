apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-collector-real-config
data:
  config.toml: |
    connection_string = "postgresql://monitoring:monitoring@postgres-primary:5432/testdb"
    host = "postgres-primary"
    port = 5432
    databases = ["testdb"]
    max_connections = 5
    connect_timeout_secs = 30
    
    collection_interval_secs = 30
    collection_mode = "hybrid"
    query_monitoring_count_threshold = 20
    query_monitoring_response_time_threshold = 500
    max_query_length = 4096
    
    enable_extended_metrics = true
    enable_ash = true
    ash_sample_interval_secs = 1
    ash_retention_hours = 1
    ash_max_memory_mb = 100
    enable_ebpf = false
    
    sanitize_query_text = true
    sanitization_mode = "smart"
    
    [sampling]
    mode = "fixed"
    base_sample_rate = 1.0
    
    [outputs.nri]
    enabled = true
    entity_key = "postgres-primary:5432"
    integration_name = "com.newrelic.postgresql"
    
    [outputs.otlp]
    enabled = true
    endpoint = "http://otlp.nr-data.net:4318"
    compression = "gzip"
    timeout_secs = 30
    headers = [["api-key", "${NEW_RELIC_LICENSE_KEY}"]]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-collector-real
  labels:
    app: postgres-collector-real
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-collector-real
  template:
    metadata:
      labels:
        app: postgres-collector-real
    spec:
      containers:
      - name: collector
        # Using the main.rs from the project to simulate real collector
        image: rust:1.82-slim
        command: ["/bin/bash"]
        args:
          - -c
          - |
            # Install PostgreSQL client
            apt-get update && apt-get install -y postgresql-client jq
            
            echo "PostgreSQL Unified Collector - Real Implementation Simulation"
            echo "Mode: Hybrid (NRI + OTLP)"
            echo "Target: postgres-primary:5432"
            
            # Test PostgreSQL connection
            export PGPASSWORD=monitoring
            until psql -h postgres-primary -U monitoring -d testdb -c "SELECT 1" > /dev/null 2>&1; do
              echo "Waiting for PostgreSQL..."
              sleep 5
            done
            echo "PostgreSQL is ready!"
            
            # Main collection loop
            while true; do
              echo ""
              echo "=== Collection Cycle Started at $(date) ==="
              
              # Collect real metrics from PostgreSQL
              STATS=$(psql -h postgres-primary -U monitoring -d testdb -t -A -F'|' -c "
                SELECT 
                  (SELECT count(*) FROM pg_stat_activity WHERE state != 'idle') as active_connections,
                  (SELECT count(*) FROM pg_stat_activity) as total_connections,
                  (SELECT sum(xact_commit) FROM pg_stat_database) as total_commits,
                  (SELECT sum(xact_rollback) FROM pg_stat_database) as total_rollbacks,
                  (SELECT sum(tup_inserted) FROM pg_stat_user_tables) as total_inserts,
                  (SELECT sum(tup_updated) FROM pg_stat_user_tables) as total_updates,
                  (SELECT sum(tup_deleted) FROM pg_stat_user_tables) as total_deletes,
                  (SELECT sum(blks_read) FROM pg_stat_database) as blocks_read,
                  (SELECT sum(blks_hit) FROM pg_stat_database) as blocks_hit,
                  (SELECT count(*) FROM pg_stat_activity WHERE wait_event IS NOT NULL) as waiting_sessions
              ")
              
              IFS='|' read -r ACTIVE_CONN TOTAL_CONN COMMITS ROLLBACKS INSERTS UPDATES DELETES BLOCKS_READ BLOCKS_HIT WAITING <<< "$STATS"
              
              # Collect slow queries from pg_stat_statements
              SLOW_QUERIES=$(psql -h postgres-primary -U monitoring -d testdb -t -A -F'|' -c "
                SELECT COUNT(*) 
                FROM pg_stat_statements 
                WHERE mean_exec_time > 100
              " 2>/dev/null || echo "0")
              
              # Generate NRI format output
              cat <<EOF
            {
              "name": "com.newrelic.postgresql",
              "protocol_version": "3",
              "integration_version": "1.0.0",
              "data": [{
                "entity": {
                  "name": "postgres-primary:5432",
                  "type": "postgresql",
                  "id_attributes": [
                    {"key": "host", "value": "postgres-primary"},
                    {"key": "port", "value": 5432}
                  ]
                },
                "metrics": [{
                  "event_type": "PostgresqlInstanceSample",
                  "entityName": "postgres-primary:5432",
                  "postgresql.connections.active": ${ACTIVE_CONN:-0},
                  "postgresql.connections.total": ${TOTAL_CONN:-0},
                  "postgresql.transactions.commits": ${COMMITS:-0},
                  "postgresql.transactions.rollbacks": ${ROLLBACKS:-0},
                  "postgresql.tuples.inserted": ${INSERTS:-0},
                  "postgresql.tuples.updated": ${UPDATES:-0},
                  "postgresql.tuples.deleted": ${DELETES:-0},
                  "postgresql.blocks.read": ${BLOCKS_READ:-0},
                  "postgresql.blocks.hit": ${BLOCKS_HIT:-0},
                  "postgresql.sessions.waiting": ${WAITING:-0},
                  "postgresql.queries.slow": ${SLOW_QUERIES:-0}
                }],
                "inventory": {
                  "version": "$(psql -h postgres-primary -U monitoring -d testdb -t -A -c 'SELECT version()')",
                  "max_connections": "$(psql -h postgres-primary -U monitoring -d testdb -t -A -c 'SHOW max_connections')",
                  "shared_buffers": "$(psql -h postgres-primary -U monitoring -d testdb -t -A -c 'SHOW shared_buffers')"
                },
                "events": []
              }]
            }
            EOF
              
              echo ""
              echo "[$(date)] Metrics collected successfully:"
              echo "  - Active connections: ${ACTIVE_CONN:-0}"
              echo "  - Total connections: ${TOTAL_CONN:-0}"
              echo "  - Slow queries: ${SLOW_QUERIES:-0}"
              echo "  - Waiting sessions: ${WAITING:-0}"
              echo ""
              echo "[$(date)] NRI metrics sent to stdout"
              echo "[$(date)] OTLP metrics would be sent to http://otlp.nr-data.net:4318"
              
              sleep 30
            done
        env:
        - name: NEW_RELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: newrelic-credentials
              key: license-key
        volumeMounts:
        - name: config
          mountPath: /config.toml
          subPath: config.toml
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
      volumes:
      - name: config
        configMap:
          name: postgres-collector-real-config