version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: myapp
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries='pg_stat_statements'"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-extensions.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-collector:
    image: postgres-unified-collector:latest
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Connection settings
      POSTGRES_CONNECTION_STRING: postgresql://postgres:mysecretpassword@postgres:5432/myapp
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DATABASE: myapp
      POSTGRES_DATABASES: myapp
      POSTGRES_MAX_CONNECTIONS: 10
      POSTGRES_CONNECT_TIMEOUT_SECS: 30
      
      # Collection configuration
      COLLECTION_MODE: hybrid
      COLLECTION_INTERVAL_SECS: 60
      ENABLE_EXTENDED_METRICS: "true"
      ENABLE_EBPF: "false"
      ENABLE_ASH: "true"
      ASH_SAMPLE_INTERVAL_SECS: 5
      ASH_RETENTION_HOURS: 24
      ASH_MAX_MEMORY_MB: 100
      
      # Query monitoring
      QUERY_MONITORING_COUNT_THRESHOLD: 100
      QUERY_MONITORING_RESPONSE_TIME_THRESHOLD: 1000
      SANITIZE_QUERY_TEXT: "true"
      SANITIZATION_MODE: smart
      
      # NRI Output
      NRI_ENABLED: "true"
      NRI_ENTITY_KEY: "postgres:5432"
      NRI_INTEGRATION_NAME: "com.newrelic.postgresql"
      
      # OTLP Output
      OTLP_ENABLED: "true"
      OTLP_ENDPOINT: http://otel-collector:4318
      OTLP_PROTOCOL: http
      OTLP_COMPRESSION: gzip
      OTLP_TIMEOUT_SECS: 30
      
      # New Relic Configuration
      NEW_RELIC_API_KEY: ${NEW_RELIC_API_KEY}
      NEW_RELIC_ACCOUNT_ID: ${NEW_RELIC_ACCOUNT_ID}
      NEW_RELIC_REGION: ${NEW_RELIC_REGION:-US}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      
      # Health and logging
      HEALTH_ENABLED: "true"
      HEALTH_BIND_ADDRESS: "0.0.0.0:8080"
      LOG_LEVEL: info
      LOG_FORMAT: json
      
      # Environment identification
      ENVIRONMENT: production
      SERVICE_NAME: postgres-collector
      SERVICE_VERSION: 1.0.0
    volumes:
      - ./collector-config.toml:/etc/postgres-collector/collector-config.toml:ro
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "9090:9090"  # Prometheus metrics
      - "8888:8888"  # Collector metrics
    networks:
      - monitoring

  # Optional: Prometheus for local metrics storage
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  monitoring:
    driver: bridge