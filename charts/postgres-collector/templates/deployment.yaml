{{- if eq .Values.deploymentMode "deployment" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "postgres-collector.fullname" . }}
  labels:
    {{- include "postgres-collector.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "postgres-collector.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "postgres-collector.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres-collector.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if eq .Values.image.repository "busybox" }}
          command:
            - /bin/sh
            - -c
            - |
              echo "Mock PostgreSQL Collector Started"
              echo "Mode: {{ .Values.collectorMode }}"
              while true; do
                echo "{\"name\":\"com.newrelic.postgresql\",\"protocol_version\":\"4\",\"integration_version\":\"1.0.0\",\"data\":[{\"entity\":{\"name\":\"test-postgres\",\"type\":\"POSTGRES_INSTANCE\"},\"metrics\":[{\"event_type\":\"PostgresSlowQueries\",\"timestamp\":$(date +%s),\"database\":\"testdb\",\"query\":\"SELECT 1\",\"duration_ms\":100}],\"inventory\":{},\"events\":[]}]}"
                sleep 30
              done
          {{- else }}
          args:
            - --config
            - /etc/postgres-collector/config.toml
            - --mode
            - {{ .Values.collectorMode }}
          {{- end }}
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: COLLECTOR_MODE
              value: {{ .Values.collectorMode | quote }}
            - name: NEW_RELIC_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-collector.newrelicSecretName" . }}
                  key: {{ .Values.newrelic.existingSecretLicenseKey | default "license-key" }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-collector.postgresqlSecretName" . }}
                  key: {{ .Values.postgresql.existingSecretPasswordKey | default "password" }}
            {{- if .Values.pgbouncer.enabled }}
            - name: PGBOUNCER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-collector.pgbouncerSecretName" . }}
                  key: {{ .Values.pgbouncer.existingSecretPasswordKey | default "password" }}
            {{- end }}
            {{- with .Values.extraEnvVars }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.extraEnvFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: health
              containerPort: {{ .Values.service.healthPort }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.service.metricsPort }}
              protocol: TCP
          {{- if and .Values.healthCheck.enabled (ne .Values.image.repository "busybox") }}
          livenessProbe:
            {{- toYaml .Values.healthCheck.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.healthCheck.readinessProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /etc/postgres-collector
              readOnly: true
            - name: tmp
              mountPath: /tmp
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "postgres-collector.fullname" . }}
        - name: tmp
          emptyDir: {}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}