receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  # Batch processor for optimal performance
  batch:
    timeout: 5s
    send_batch_size: 1000
    send_batch_max_size: 2000
    
  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128
    
  # Resource processor to add New Relic specific attributes
  resource:
    attributes:
      - key: newrelic.source
        value: postgresql.otel.collector
        action: insert
      - key: telemetry.sdk.name
        value: opentelemetry
        action: insert
      - key: telemetry.sdk.language
        value: rust
        action: insert
      - key: cloud.provider
        from_attribute: CLOUD_PROVIDER
        action: insert
      - key: cloud.region
        from_attribute: CLOUD_REGION
        action: insert
        
  # Attributes processor for dimension management
  attributes/dimensions:
    actions:
      # Ensure consistent dimension naming
      - key: db.name
        from_attribute: database
        action: upsert
      - key: db.operation
        from_attribute: operation
        action: upsert
      - key: db.schema
        from_attribute: schema_name
        action: upsert
        
      # Add query categorization
      - key: query.category
        pattern: ^SELECT.*FROM\s+pg_
        value: system
        action: insert
      - key: query.category  
        pattern: ^SELECT.*FROM\s+information_schema
        value: metadata
        action: insert
      - key: query.category
        value: user
        action: insert
        
  # Transform processor for metric adjustments
  transform/metrics:
    metric_statements:
      - context: metric
        statements:
          # Ensure proper histogram boundaries for query duration
          - set(unit, "ms") where name == "postgresql.query.duration"
          - set(unit, "{connections}") where name == "postgresql.connection.count"
          - set(unit, "%") where name == "postgresql.connection.utilization"
          
  # Filter processor to reduce cardinality
  filter/cardinality:
    metrics:
      metric:
        # Drop system queries from metrics
        - 'attributes["query.category"] == "system"'
        # Drop pg_stat monitoring queries
        - 'attributes["query.text"] != nil and IsMatch(attributes["query.text"], ".*pg_stat.*")'

exporters:
  # New Relic OTLP exporter
  otlp/newrelic:
    endpoint: https://otlp.nr-data.net:4317
    headers:
      api-key: ${NEW_RELIC_LICENSE_KEY}
    compression: gzip
    timeout: 30s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 1000
      
  # Debug exporter for local troubleshooting
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    
  pprof:
    endpoint: 0.0.0.0:1777
    
  memory_ballast:
    size_mib: 256

service:
  extensions: [health_check, pprof, memory_ballast]
  pipelines:
    metrics:
      receivers: [otlp]
      processors: 
        - memory_limiter
        - resource
        - attributes/dimensions
        - transform/metrics
        - filter/cardinality
        - batch
      exporters: [otlp/newrelic, debug]
    
  telemetry:
    logs:
      level: info
      initial_fields:
        service: otel-collector-postgresql
    metrics:
      level: detailed
      address: 0.0.0.0:8888