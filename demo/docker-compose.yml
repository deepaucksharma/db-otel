version: '3.8'

services:
  # PostgreSQL database with monitoring extensions
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: testdb
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries='pg_stat_statements'"
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Simulated workload generator
  workload:
    image: postgres:15
    depends_on:
      postgres:
        condition: service_healthy
    command: |
      bash -c "
        sleep 10
        while true; do
          PGPASSWORD=postgres123 psql -h postgres -U postgres -d testdb -c 'SELECT pg_sleep(random()), * FROM generate_series(1,1000);' &
          PGPASSWORD=postgres123 psql -h postgres -U postgres -d testdb -c 'INSERT INTO test_table (data) SELECT md5(random()::text) FROM generate_series(1,100);' &
          PGPASSWORD=postgres123 psql -h postgres -U postgres -d testdb -c 'UPDATE test_table SET data = md5(random()::text) WHERE id = (SELECT id FROM test_table ORDER BY random() LIMIT 1);' &
          sleep 5
        done
      "

  # Mock unified collector (Python simulation)
  collector:
    image: python:3.11-slim
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: testdb
      COLLECTION_INTERVAL: 30
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY:-dummy_key}
      OTLP_ENDPOINT: http://otel-collector:4317
    volumes:
      - ./collector.py:/app/collector.py
      - ./requirements.txt:/app/requirements.txt
    working_dir: /app
    command: |
      bash -c "
        pip install -r requirements.txt
        python collector.py
      "

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"  # OTLP gRPC
      - "8888:8888"  # Prometheus metrics
      - "13133:13133" # Health check

  # Prometheus for metrics storage
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana-dashboard.json:/etc/grafana/provisioning/dashboards/postgres.json
      - ./grafana-datasource.yml:/etc/grafana/provisioning/datasources/prometheus.yml
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: