# High Availability Collector Configuration with Redis State Storage

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    path: "/health"
    
  pprof:
    endpoint: 0.0.0.0:1777
    
  zpages:
    endpoint: 0.0.0.0:55679
    
  # Redis storage for distributed state
  storage/redis:
    endpoint: ${env:REDIS_ENDPOINT:-redis:6379}
    password: ${env:REDIS_PASSWORD}
    db: 0
    expiration: 24h
    
receivers:
  # PostgreSQL receiver
  postgresql:
    endpoint: ${env:PG_HOST:-localhost}:${env:PG_PORT:-5432}
    username: ${env:PG_USER:-newrelic_monitor}
    password: ${env:PG_PASSWORD:-monitor123}
    databases:
      - ${env:PG_DATABASE:-testdb}
    collection_interval: 60s
    tls:
      insecure: true
      
  # SQL Query receiver with Redis storage
  sqlquery/postgresql_queries:
    driver: postgres
    dsn: "${env:PG_REPLICA_DSN}"
    collection_interval: 300s
    timeout: 10s
    storage: storage/redis  # Use Redis instead of file storage
    queries:
      - sql: |
          SELECT 
            pss.queryid::text AS query_id,
            pd.datname AS database_name,
            pss.calls AS execution_count,
            pss.mean_exec_time AS mean_time_ms,
            pss.rows AS rows_returned,
            pss.shared_blks_hit + pss.local_blks_hit AS cache_hits,
            pss.shared_blks_read + pss.local_blks_read AS disk_reads
          FROM pg_stat_statements pss
          JOIN pg_database pd ON pss.dbid = pd.oid
          WHERE pd.datname = current_database()
            AND pss.calls > 0;
        metrics:
          - metric_name: db.query.count
            value_column: execution_count
            value_type: int
            data_point_type: sum
            aggregation: cumulative
            monotonic: true
            attribute_columns:
              - query_id
              - database_name

processors:
  # Memory protection
  memory_limiter:
    check_interval: 1s
    limit_percentage: 75
    spike_limit_percentage: 20
    
  # Adaptive sampler with Redis state
  adaptive_sampler:
    storage: storage/redis
    mode: distributed
    policies:
      - name: high_cost_queries
        type: query_cost
        threshold: 1000  # ms
        sample_rate: 1.0  # 100% sampling
      - name: medium_cost_queries  
        type: query_cost
        threshold: 100
        sample_rate: 0.5  # 50% sampling
      - name: low_cost_queries
        type: query_cost
        threshold: 0
        sample_rate: 0.1  # 10% sampling
    state_sync_interval: 30s
    
  # Circuit breaker with Redis coordination
  circuit_breaker:
    storage: storage/redis
    mode: distributed
    databases:
      default:
        error_threshold: 0.5  # 50% error rate
        request_threshold: 10  # minimum requests
        timeout: 60s
        half_open_requests: 3
    coordination:
      sync_interval: 10s
      leader_election: true
      
  # Resource attributes
  resource:
    attributes:
      - key: service.name
        value: postgresql
        action: insert
      - key: service.instance.id
        value: ${env:HOSTNAME}
        action: insert
      - key: deployment.environment
        value: ${env:DEPLOYMENT_ENV:-production}
        action: insert
        
  # Batch processing
  batch:
    timeout: 30s
    send_batch_size: 5000

exporters:
  # Debug exporter
  debug:
    verbosity: normal
    sampling_initial: 5
    sampling_thereafter: 100
    
  # OTLP exporter with retry
  otlp/newrelic:
    endpoint: "${env:OTLP_ENDPOINT:-https://otlp.nr-data.net:4318}"
    headers:
      api-key: "${env:NEW_RELIC_LICENSE_KEY}"
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 5000
      storage: storage/redis  # Use Redis for queue persistence
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
      
  # Prometheus for monitoring
  prometheus:
    endpoint: "0.0.0.0:9090"
    resource_to_telemetry_conversion:
      enabled: true

service:
  extensions: [health_check, pprof, zpages, storage/redis]
  
  telemetry:
    logs:
      level: "${env:LOG_LEVEL:-info}"
      encoding: json
      output_paths: 
        - stdout
        - /var/log/collector.log
      
    metrics:
      level: detailed
      address: 0.0.0.0:8888
      
  pipelines:
    metrics/postgresql:
      receivers: [postgresql]
      processors:
        - memory_limiter
        - resource
        - batch
      exporters: [otlp/newrelic, prometheus]
      
    metrics/queries:
      receivers: [sqlquery/postgresql_queries]
      processors:
        - memory_limiter
        - adaptive_sampler
        - circuit_breaker
        - resource
        - batch
      exporters: [otlp/newrelic, debug]