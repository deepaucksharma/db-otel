receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

  sqlquery:
    driver: postgres
    datasource: "host=localhost port=5432 user=postgres password=postgres dbname=testdb sslmode=disable"
    queries:
      - sql: |
          SELECT 
            count(*) as query_count,
            avg(mean_exec_time) as avg_query_time,
            max(max_exec_time) as max_query_time
          FROM pg_stat_statements
        collection_interval: 30s
        metrics:
          - metric_name: db.query.count
            value_column: query_count
            value_type: int
            data_type: gauge
          - metric_name: db.query.avg_time
            value_column: avg_query_time
            value_type: double
            data_type: gauge
          - metric_name: db.query.max_time
            value_column: max_query_time
            value_type: double
            data_type: gauge

processors:
  batch:
    timeout: 10s
    send_batch_size: 1000

  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

exporters:
  logging:
    verbosity: detailed
    sampling_initial: 10
    sampling_thereafter: 100

  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: db_intelligence

  otlp:
    endpoint: ${OTLP_ENDPOINT:-https://otlp.nr-data.net:4317}
    headers:
      api-key: ${NEW_RELIC_LICENSE_KEY}
    compression: gzip

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    path: /health
    check_collector_pipeline:
      enabled: true
      interval: 5s
      exporter_failure_threshold: 5

  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, zpages]
  pipelines:
    metrics:
      receivers: [prometheus, sqlquery]
      processors: [memory_limiter, batch]
      exporters: [logging, prometheus]

  telemetry:
    logs:
      level: info
      encoding: console
    metrics:
      level: detailed
      address: 0.0.0.0:8888