name: Release Automation

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_branch: ${{ steps.branch.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Get latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            VERSION=$(echo $LATEST_TAG | sed 's/v//')
            
            # Calculate new version based on release type
            IFS='.' read -r major minor patch <<< "$VERSION"
            
            case "${{ github.event.inputs.release_type }}" in
              major)
                VERSION="v$((major + 1)).0.0"
                ;;
              minor)
                VERSION="v${major}.$((minor + 1)).0"
                ;;
              patch)
                VERSION="v${major}.${minor}.$((patch + 1))"
                ;;
              prerelease)
                VERSION="v${major}.${minor}.${patch}-rc.1"
                ;;
            esac
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Create release branch
        id: branch
        run: |
          BRANCH="release/${VERSION}"
          git checkout -b $BRANCH
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Update version in files
        run: |
          # Update Chart.yaml
          sed -i "s/^version:.*/version: ${VERSION#v}/" deployments/helm/db-intelligence/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: ${VERSION#v}/" deployments/helm/db-intelligence/Chart.yaml
          
          # Update any version references in documentation
          find docs -name "*.md" -type f -exec sed -i "s/version: .*/version: $VERSION/g" {} \;
          
          # Commit changes
          git add -A
          git commit -m "chore: bump version to $VERSION" || echo "No version changes to commit"

      - name: Push release branch
        run: |
          git push origin ${{ steps.branch.outputs.branch }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          head: ${{ steps.branch.outputs.branch }}
          title: "Release ${{ steps.version.outputs.version }}"
          body: |
            ## Release ${{ steps.version.outputs.version }}
            
            This PR was automatically created by the release workflow.
            
            ### Checklist
            - [ ] Version bumped in Chart.yaml
            - [ ] Documentation updated
            - [ ] CHANGELOG.md updated
            - [ ] All tests passing
            
            ### Release Type
            ${{ github.event.inputs.release_type }}
            
            /cc @${{ github.actor }}
          labels: |
            release
            automated

  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.prepare-release.outputs.release_branch }}

      - name: Generate changelog
        uses: orhun/git-cliff-action@v2
        with:
          config: .cliff.toml
          args: --tag ${{ needs.prepare-release.outputs.version }}
        env:
          OUTPUT: CHANGELOG.md

      - name: Commit changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG.md for ${{ needs.prepare-release.outputs.version }}" || echo "No changelog updates"
          git push origin ${{ needs.prepare-release.outputs.release_branch }}

  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: [prepare-release, changelog]
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.release_branch }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run release validation
        run: |
          # Validate version consistency
          CHART_VERSION=$(grep "^version:" deployments/helm/db-intelligence/Chart.yaml | awk '{print $2}')
          EXPECTED_VERSION="${{ needs.prepare-release.outputs.version }}"
          EXPECTED_VERSION="${EXPECTED_VERSION#v}"  # Remove 'v' prefix
          
          if [ "$CHART_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "Error: Chart version mismatch"
            echo "Expected: $EXPECTED_VERSION"
            echo "Found: $CHART_VERSION"
            exit 1
          fi
          
          # Run tests
          make test
          
          # Validate Helm chart
          helm lint deployments/helm/db-intelligence

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${{ needs.prepare-release.outputs.release_branch }}`,
              base: 'main',
              state: 'open'
            });
            
            if (pulls.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pulls[0].number,
                body: 'âœ… Release validation passed! Ready to merge and tag.'
              });
            }