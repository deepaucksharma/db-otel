# Database Intelligence MVP - Kubernetes StatefulSet
# FIXED: Supports active-passive HA pattern

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-intelligence-collector
  namespace: monitoring
  labels:
    app: db-intelligence
    component: collector
    version: mvp-1.0
spec:
  serviceName: db-intelligence
  replicas: 2  # FIXED: Active-passive setup
  
  # Ordered deployment for leader election
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    
  selector:
    matchLabels:
      app: db-intelligence
      component: collector
      
  template:
    metadata:
      labels:
        app: db-intelligence
        component: collector
        version: mvp-1.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
        
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
        
      # Service account for leader election
      serviceAccountName: db-intelligence-collector
      
      # Anti-affinity to spread across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: db-intelligence
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: collector
        image: otel/opentelemetry-collector-contrib:0.88.0
        args: ["--config=/etc/otel/config.yaml"]
        
        # Resource limits
        resources:
          requests:
            memory: 512Mi
            cpu: 500m
          limits:
            memory: 1Gi
            cpu: 1000m
            
        # Environment variables
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: INSTANCE_ID
          value: "$(POD_NAME).$(POD_NAMESPACE)"
        - name: DEPLOYMENT_ENV
          value: "kubernetes"
        
        # Secrets
        envFrom:
        - secretRef:
            name: db-intelligence-config
            
        # Volume mounts
        volumeMounts:
        - name: config
          mountPath: /etc/otel
          readOnly: true
        - name: storage
          mountPath: /var/lib/otel/storage
        - name: tmp
          mountPath: /tmp
        - name: var-log
          mountPath: /var/log
          readOnly: true
          
        # Health checks
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          
        # Ports
        ports:
        - name: health
          containerPort: 13133
          protocol: TCP
        - name: metrics
          containerPort: 8888
          protocol: TCP
        - name: zpages
          containerPort: 55679
          protocol: TCP
          
      # Leader election sidecar
      - name: leader-elector
        image: k8s.gcr.io/leader-elector:0.5
        args:
        - --election=db-intelligence-leader
        - --http=0.0.0.0:4040
        - --ttl=30s
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
              
        resources:
          requests:
            memory: 32Mi
            cpu: 50m
          limits:
            memory: 64Mi
            cpu: 100m
            
        ports:
        - name: leader-http
          containerPort: 4040
          
      # Volumes
      volumes:
      - name: config
        configMap:
          name: db-intelligence-config
      - name: tmp
        emptyDir: {}
      - name: var-log
        hostPath:
          path: /var/log
          type: Directory
          
  # Persistent volume claim templates
  volumeClaimTemplates:
  - metadata:
      name: storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi

---
# Service for collectors
apiVersion: v1
kind: Service
metadata:
  name: db-intelligence
  namespace: monitoring
  labels:
    app: db-intelligence
spec:
  clusterIP: None  # Headless service for StatefulSet
  selector:
    app: db-intelligence
    component: collector
  ports:
  - name: health
    port: 13133
    targetPort: 13133
  - name: metrics
    port: 8888
    targetPort: 8888
  - name: zpages
    port: 55679
    targetPort: 55679

---
# Service for leader election
apiVersion: v1
kind: Service
metadata:
  name: db-intelligence-leader
  namespace: monitoring
spec:
  selector:
    app: db-intelligence
    component: collector
  ports:
  - name: leader-http
    port: 4040
    targetPort: 4040

---
# ServiceAccount for leader election
apiVersion: v1
kind: ServiceAccount
metadata:
  name: db-intelligence-collector
  namespace: monitoring

---
# ClusterRole for leader election
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: db-intelligence-leader-election
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: db-intelligence-leader-election
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: db-intelligence-leader-election
subjects:
- kind: ServiceAccount
  name: db-intelligence-collector
  namespace: monitoring

---
# ConfigMap for collector configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-intelligence-config
  namespace: monitoring
data:
  config.yaml: |
    # Include the full collector-improved.yaml content here
    # Or use a separate file and kubectl create configmap

---
# Secret for credentials
apiVersion: v1
kind: Secret
metadata:
  name: db-intelligence-config
  namespace: monitoring
type: Opaque
stringData:
  PG_REPLICA_DSN: "postgres://newrelic_monitor:password@pg-replica:5432/production?sslmode=require"
  MYSQL_READONLY_DSN: "newrelic_monitor:password@tcp(mysql-replica:3306)/production?tls=true"
  NEW_RELIC_LICENSE_KEY: "your-license-key-here"
  OTLP_ENDPOINT: "https://otlp.nr-data.net:4317"

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-intelligence-network-policy
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: db-intelligence
  policyTypes:
  - Egress
  - Ingress
  
  # Ingress rules
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 13133  # Health checks
    - protocol: TCP
      port: 8888   # Metrics
    - protocol: TCP
      port: 55679  # zpages
      
  # Egress rules
  egress:
  # Database access
  - to:
    - namespaceSelector:
        matchLabels:
          name: databases
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 3306
      
  # New Relic access
  - to: []  # All external
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 4317
      
  # DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53