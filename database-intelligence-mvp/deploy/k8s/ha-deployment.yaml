# Database Intelligence MVP - High Availability Deployment
# FIXED: Addresses single instance limitation with leader election

apiVersion: v1
kind: Namespace
metadata:
  name: db-intelligence
  labels:
    name: db-intelligence

---
# ConfigMap for HA configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-intelligence-ha-config
  namespace: db-intelligence
data:
  collector.yaml: |
    

---
# ServiceAccount for leader election
apiVersion: v1
kind: ServiceAccount
metadata:
  name: db-intelligence-collector
  namespace: db-intelligence

---
# ClusterRole for leader election
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: db-intelligence-leader-election
rules:
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "create", "update", "patch", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: db-intelligence-leader-election
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: db-intelligence-leader-election
subjects:
- kind: ServiceAccount
  name: db-intelligence-collector
  namespace: db-intelligence

---
# HA Deployment (instead of StatefulSet)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-intelligence-collector
  namespace: db-intelligence
  labels:
    app: db-intelligence
    component: collector
spec:
  replicas: 3  # HA: Multiple replicas with leader election
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
      
  selector:
    matchLabels:
      app: db-intelligence
      component: collector
      
  template:
    metadata:
      labels:
        app: db-intelligence
        component: collector
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
        
    spec:
      serviceAccountName: db-intelligence-collector
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
        
      # Anti-affinity for HA
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: db-intelligence
                component: collector
            topologyKey: kubernetes.io/hostname
            
      containers:
      - name: collector
        image: otel/opentelemetry-collector-contrib:0.88.0
        args: ["--config=/etc/otel/config.yaml"]
        
        resources:
          requests:
            memory: 512Mi
            cpu: 300m
          limits:
            memory: 1Gi
            cpu: 500m
            
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
              
        envFrom:
        - secretRef:
            name: db-intelligence-secrets
            
        volumeMounts:
        - name: config
          mountPath: /etc/otel
          readOnly: true
        - name: tmp
          mountPath: /tmp
          
        ports:
        - name: health
          containerPort: 13133
        - name: metrics
          containerPort: 8888
          
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          
      volumes:
      - name: config
        configMap:
          name: db-intelligence-ha-config
      - name: tmp
        emptyDir: {}

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: db-intelligence-service
  namespace: db-intelligence
  labels:
    app: db-intelligence
spec:
  selector:
    app: db-intelligence
    component: collector
  ports:
  - name: health
    port: 13133
    targetPort: 13133
  - name: metrics
    port: 8888
    targetPort: 8888

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: db-intelligence-metrics
  namespace: db-intelligence
  labels:
    app: db-intelligence
spec:
  selector:
    matchLabels:
      app: db-intelligence
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# Secret for credentials (to be filled by user)
apiVersion: v1
kind: Secret
metadata:
  name: db-intelligence-secrets
  namespace: db-intelligence
type: Opaque
stringData:
  PG_REPLICA_DSN: "postgres://user:pass@host:5432/db?sslmode=require"
  MYSQL_READONLY_DSN: "user:pass@tcp(host:3306)/db?tls=true"
  NEW_RELIC_LICENSE_KEY: "your-license-key"
  OTLP_ENDPOINT: "https://otlp.nr-data.net:4317"

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-intelligence-network-policy
  namespace: db-intelligence
spec:
  podSelector:
    matchLabels:
      app: db-intelligence
  policyTypes:
  - Egress
  - Ingress
  
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 13133
    - protocol: TCP
      port: 8888
      
  egress:
  # Database access
  - to: []
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 3306
  # New Relic access
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 4317
  # DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53