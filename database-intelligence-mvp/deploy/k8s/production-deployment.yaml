# Production-Grade Kubernetes Deployment for Database Intelligence MVP
# Incorporates New Relic best practices for OpenTelemetry integration
apiVersion: v1
kind: Namespace
metadata:
  name: database-intelligence
  labels:
    app: database-intelligence
    monitoring: enabled
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: database-intelligence
data:
  collector.yaml: |
    # Reference to collector-newrelic-optimized.yaml
    # This would be populated by your CI/CD or Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: database-intelligence
type: Opaque
stringData:
  new-relic-license-key: "${NEW_RELIC_LICENSE_KEY}"
  pg-replica-dsn: "${PG_REPLICA_DSN}"
  mysql-readonly-dsn: "${MYSQL_READONLY_DSN}"
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: database-intelligence
  labels:
    app: otel-collector
spec:
  selector:
    app: otel-collector
  ports:
    - name: health
      port: 13133
      targetPort: 13133
    - name: metrics
      port: 8888
      targetPort: 8888
    - name: zpages
      port: 55679
      targetPort: 55679
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector-headless
  namespace: database-intelligence
  labels:
    app: otel-collector
spec:
  clusterIP: None
  selector:
    app: otel-collector
  ports:
    - name: health
      port: 13133
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: otel-collector-pdb
  namespace: database-intelligence
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: otel-collector
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: otel-collector
  namespace: database-intelligence
  labels:
    app: otel-collector
spec:
  serviceName: otel-collector-headless
  replicas: 3
  selector:
    matchLabels:
      app: otel-collector
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: otel-collector
        version: "2.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: otel-collector
      
      # Anti-affinity for high availability
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - otel-collector
            topologyKey: kubernetes.io/hostname
            
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
        
      # Init container to validate configuration
      initContainers:
      - name: config-validator
        image: otel/opentelemetry-collector-contrib:0.89.0
        command:
        - /otelcol-contrib
        - --config=/etc/otel/collector.yaml
        - --dry-run
        volumeMounts:
        - name: config
          mountPath: /etc/otel
          
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.89.0
        imagePullPolicy: IfNotPresent
        
        command:
        - /otelcol-contrib
        - --config=/etc/otel/collector.yaml
        
        env:
        # Performance tuning
        - name: GOMEMLIMIT
          value: "460MiB"  # 90% of memory limit
        - name: GOGC
          value: "80"      # More aggressive GC
        - name: GOMAXPROCS
          value: "2"       # Limit CPU usage
          
        # New Relic configuration
        - name: NEW_RELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: new-relic-license-key
              
        - name: OTLP_ENDPOINT
          value: "https://otlp.nr-data.net:4318"
          
        # Database connections
        - name: PG_REPLICA_DSN
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: pg-replica-dsn
              
        - name: MYSQL_READONLY_DSN
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: mysql-readonly-dsn
              
        # Deployment metadata
        - name: DEPLOYMENT_ENV
          value: "production"
          
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
              
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
              
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
              
        # Collection parameters
        - name: COLLECTION_INTERVAL_SECONDS
          value: "60"
          
        - name: QUERY_TIMEOUT_MS
          value: "3000"
          
        - name: SAMPLING_PERCENTAGE
          value: "25"
          
        - name: LOG_LEVEL
          value: "info"
        
        ports:
        - name: health
          containerPort: 13133
        - name: metrics
          containerPort: 8888
        - name: zpages
          containerPort: 55679
          
        # Health checks
        livenessProbe:
          httpGet:
            path: /
            port: health
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: /
            port: health
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          
        # Resource limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
            
        # Volume mounts
        volumeMounts:
        - name: config
          mountPath: /etc/otel
        - name: file-storage
          mountPath: /var/lib/otel
        - name: logs
          mountPath: /var/log
          
      volumes:
      - name: config
        configMap:
          name: otel-collector-config
          
      - name: logs
        emptyDir: {}
        
  # Persistent storage for file_storage extension
  volumeClaimTemplates:
  - metadata:
      name: file-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: database-intelligence
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
rules:
- apiGroups: [""]
  resources: ["nodes", "pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "daemonsets", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector
subjects:
- kind: ServiceAccount
  name: otel-collector
  namespace: database-intelligence
---
# HorizontalPodAutoscaler for scaling based on load
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: otel-collector-hpa
  namespace: database-intelligence
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: otel-collector
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: otel-collector-network-policy
  namespace: database-intelligence
spec:
  podSelector:
    matchLabels:
      app: otel-collector
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8888  # Metrics
    - protocol: TCP
      port: 13133 # Health
  egress:
  # Allow DNS
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
  # Allow New Relic endpoint
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 4318
  # Allow database connections
  - to:
    - ipBlock:
        cidr: 10.0.0.0/8  # Adjust for your database network
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 3306  # MySQL
---
# Monitoring ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: otel-collector
  namespace: database-intelligence
  labels:
    app: otel-collector
spec:
  selector:
    matchLabels:
      app: otel-collector
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics