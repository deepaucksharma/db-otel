# Database Intelligence MVP - Docker Compose Configuration
# Production-ready deployment with proper security and networking

version: '3.8'

networks:
  db-intelligence:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  # External network for database access
  database:
    external: true
    name: database_network

services:
  # Main Database Intelligence Collector
  db-intelligence-collector:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE}
        - VCS_REF=${VCS_REF}
    
    image: newrelic/database-intelligence-collector:mvp-1.0
    
    container_name: nr-db-intelligence-collector
    hostname: db-intelligence-collector
    
    # Restart policy
    restart: unless-stopped
    
    # Resource limits for safety
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    
    # User configuration
    user: "10001:10001"
    
    # Read-only root filesystem for security
    read_only: true
    
    # Temporary filesystems for writable areas
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/cache:noexec,nosuid,size=100m
    
    # Environment variables
    environment:
      # New Relic Configuration
      NEW_RELIC_LICENSE_KEY: "${NEW_RELIC_LICENSE_KEY}"
      OTLP_ENDPOINT: "${OTLP_ENDPOINT:-https://otlp.nr-data.net:4317}"
      
      # Database Connections
      PG_REPLICA_DSN: "${PG_REPLICA_DSN}"
      MYSQL_READONLY_DSN: "${MYSQL_READONLY_DSN}"
      
      # Deployment Configuration
      DEPLOYMENT_ENV: "${DEPLOYMENT_ENV:-production}"
      
      # OpenTelemetry Configuration
      OTEL_RESOURCE_ATTRIBUTES: "service.name=database-intelligence-collector,service.version=mvp-1.0,deployment.environment=${DEPLOYMENT_ENV:-production}"
      OTEL_LOG_LEVEL: "${OTEL_LOG_LEVEL:-info}"
    
    # Volume mounts
    volumes:
      # Configuration
      - type: bind
        source: ./config
        target: /etc/otel
        read_only: true
      
      # Persistent state storage - CRITICAL for deduplication
      - type: volume
        source: state-storage
        target: /var/lib/otel/storage
      
      # Log output
      - type: volume
        source: log-storage
        target: /var/log/otel
      
      # Database logs (if co-located)
      - type: bind
        source: /var/log/postgresql
        target: /var/log/postgresql
        read_only: true
        bind:
          propagation: shared
      
      # TLS certificates (if needed)
      - type: bind
        source: ./certs
        target: /etc/ssl/certs/custom
        read_only: true
    
    # Port configuration
    ports:
      - "13133:13133"  # Health check
      - "8888:8888"    # Metrics
      - "55679:55679"  # Debug (zpages)
    
    # Network configuration
    networks:
      - db-intelligence
      - database
    
    # DNS configuration
    dns:
      - 8.8.8.8
      - 8.8.4.4
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,environment"
    
    # Labels for monitoring and management
    labels:
      - "com.newrelic.service=database-intelligence"
      - "com.newrelic.version=mvp-1.0"
      - "com.newrelic.environment=${DEPLOYMENT_ENV:-production}"
      - "traefik.enable=false"  # Disable external access by default
    
    # Dependencies
    depends_on:
      - state-init

  # State initialization container
  state-init:
    image: alpine:3.18
    container_name: nr-db-intelligence-state-init
    
    # Security
    user: "10001:10001"
    security_opt:
      - no-new-privileges:true
    
    # Initialize state directory with proper permissions
    command: |
      sh -c "
        mkdir -p /var/lib/otel/storage/sampling &&
        mkdir -p /var/lib/otel/storage/compaction &&
        chmod 755 /var/lib/otel/storage /var/lib/otel/storage/sampling /var/lib/otel/storage/compaction &&
        echo 'State directories initialized'
      "
    
    volumes:
      - type: volume
        source: state-storage
        target: /var/lib/otel/storage
    
    networks:
      - db-intelligence

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: nr-db-intelligence-prometheus
    
    profiles:
      - monitoring
    
    # Security
    user: "65534:65534"  # nobody user
    security_opt:
      - no-new-privileges:true
    
    # Configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9090'
    
    volumes:
      - type: bind
        source: ./monitoring/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
      - type: volume
        source: prometheus-data
        target: /prometheus
    
    ports:
      - "9090:9090"
    
    networks:
      - db-intelligence
    
    depends_on:
      - db-intelligence-collector

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: nr-db-intelligence-grafana
    
    profiles:
      - monitoring
    
    # Security
    user: "472:0"  # grafana user
    security_opt:
      - no-new-privileges:true
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD:-admin}"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    
    volumes:
      - type: volume
        source: grafana-data
        target: /var/lib/grafana
      - type: bind
        source: ./monitoring/grafana/provisioning
        target: /etc/grafana/provisioning
        read_only: true
    
    ports:
      - "3000:3000"
    
    networks:
      - db-intelligence
    
    depends_on:
      - prometheus

# Named volumes for persistent data
volumes:
  # Critical: State storage for sampling and deduplication
  state-storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${STATE_STORAGE_PATH:-./data/state}
  
  # Log storage
  log-storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOG_STORAGE_PATH:-./data/logs}
  
  # Monitoring data (optional)
  prometheus-data:
    driver: local
  
  grafana-data:
    driver: local