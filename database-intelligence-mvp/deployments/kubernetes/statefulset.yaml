apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nr-db-intelligence-collector
  namespace: monitoring
  labels:
    app: nr-db-intelligence
    component: collector
    version: mvp-1.0
spec:
  serviceName: nr-db-intelligence
  replicas: 1  # CRITICAL: Must be 1 due to file-based state storage
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  
  selector:
    matchLabels:
      app: nr-db-intelligence
      component: collector
  
  template:
    metadata:
      labels:
        app: nr-db-intelligence
        component: collector
        version: mvp-1.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
        # Force restart on config changes
        config/hash: ${CONFIG_HASH}
    
    spec:
      # Security Context - Non-root execution
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      
      # Service account for RBAC
      serviceAccountName: nr-db-intelligence
      
      # Node selection for database nodes (if using DaemonSet pattern)
      # nodeSelector:
      #   node-role: database
      
      # Anti-affinity to prevent multiple instances on same node
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: nr-db-intelligence
            topologyKey: kubernetes.io/hostname
      
      # Tolerations for database nodes
      tolerations:
      - key: "database-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      containers:
      - name: collector
        image: otel/opentelemetry-collector-contrib:0.91.0
        imagePullPolicy: IfNotPresent
        
        # Use custom build with our processors
        # image: newrelic/database-intelligence-collector:mvp-1.0
        
        args: 
        - "--config=/etc/otel/config.yaml"
        - "--feature-gates=processor.plan_attribute_extractor,processor.adaptive_sampler"
        
        # Environment Variables
        env:
        - name: NEW_RELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: newrelic-credentials
              key: license-key
        
        - name: OTLP_ENDPOINT
          value: "https://otlp.nr-data.net:4317"
        
        - name: PG_REPLICA_DSN
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: pg-replica-dsn
        
        - name: MYSQL_READONLY_DSN
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: mysql-readonly-dsn
              optional: true
        
        - name: DEPLOYMENT_ENV
          value: "production"
        
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        # Resource Management - Critical for Safety
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        
        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume Mounts
        volumeMounts:
        # Configuration
        - name: config
          mountPath: /etc/otel
          readOnly: true
        
        # Persistent state storage - CRITICAL
        - name: state-storage
          mountPath: /var/lib/otel/storage
        
        # Log output
        - name: log-output
          mountPath: /var/log/otel
        
        # Temporary files
        - name: tmp
          mountPath: /tmp
        
        # Cache directory
        - name: cache
          mountPath: /var/cache
        
        # Database logs (if co-located)
        - name: pg-logs
          mountPath: /var/log/postgresql
          readOnly: true
        
        # Health and Readiness Probes
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Startup Probe for slow initialization
        startupProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30  # Allow 5 minutes for startup
        
        # Container Ports
        ports:
        - name: health
          containerPort: 13133
          protocol: TCP
        - name: metrics
          containerPort: 8888
          protocol: TCP
        - name: zpages
          containerPort: 55679
          protocol: TCP
      
      # Volumes
      volumes:
      # Configuration volume
      - name: config
        configMap:
          name: nr-db-intelligence-config
          defaultMode: 0644
      
      # Temporary volumes (for read-only root filesystem)
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      
      - name: cache
        emptyDir:
          sizeLimit: 100Mi
      
      - name: log-output
        emptyDir:
          sizeLimit: 500Mi
      
      # Host log directory (if using filelog receiver)
      - name: pg-logs
        hostPath:
          path: /var/log/postgresql
          type: DirectoryOrCreate
      
      # Restart Policy
      restartPolicy: Always
      
      # Termination Grace Period
      terminationGracePeriodSeconds: 30
      
      # DNS Configuration
      dnsPolicy: ClusterFirst
      
      # Image Pull Secrets (if using private registry)
      # imagePullSecrets:
      # - name: registry-credentials

  # Persistent Volume Claims - CRITICAL for State Storage
  volumeClaimTemplates:
  - metadata:
      name: state-storage
      labels:
        app: nr-db-intelligence
        component: storage
    spec:
      accessModes: 
      - ReadWriteOnce
      
      # Storage requirements
      resources:
        requests:
          storage: 10Gi
      
      # Storage class for fast SSD
      storageClassName: fast-ssd
      
      # Volume mode
      volumeMode: Filesystem

---
# Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: nr-db-intelligence
  namespace: monitoring
  labels:
    app: nr-db-intelligence
    component: service
spec:
  clusterIP: None  # Headless service
  selector:
    app: nr-db-intelligence
    component: collector
  ports:
  - name: health
    port: 13133
    targetPort: 13133
    protocol: TCP
  - name: metrics
    port: 8888
    targetPort: 8888
    protocol: TCP
  - name: zpages
    port: 55679
    targetPort: 55679
    protocol: TCP

---
# Regular Service for External Access
apiVersion: v1
kind: Service
metadata:
  name: nr-db-intelligence-service
  namespace: monitoring
  labels:
    app: nr-db-intelligence
    component: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8888"
spec:
  type: ClusterIP
  selector:
    app: nr-db-intelligence
    component: collector
  ports:
  - name: health
    port: 13133
    targetPort: 13133
    protocol: TCP
  - name: metrics
    port: 8888
    targetPort: 8888
    protocol: TCP
  - name: zpages
    port: 55679
    targetPort: 55679
    protocol: TCP