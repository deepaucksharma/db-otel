apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-collector
  namespace: monitoring
  labels:
    app: postgres-collector
    component: telemetry
spec:
  replicas: 2
  selector:
    matchLabels:
      app: postgres-collector
  template:
    metadata:
      labels:
        app: postgres-collector
        component: telemetry
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: postgres-collector
      
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z postgres-primary 5432; do echo waiting for postgres; sleep 2; done']
      
      containers:
      - name: postgres-collector
        image: postgres-unified-collector:latest
        imagePullPolicy: Always
        
        ports:
        - name: metrics
          containerPort: 8888
          protocol: TCP
        - name: health
          containerPort: 13133
          protocol: TCP
        
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: CLOUD_PROVIDER
          value: "aws"
        - name: CLOUD_REGION
          value: "us-east-1"
        - name: POSTGRES_DSN_PRODUCTION
          valueFrom:
            secretKeyRef:
              name: postgres-collector-secrets
              key: dsn-production
        - name: POSTGRES_DSN_STAGING
          valueFrom:
            secretKeyRef:
              name: postgres-collector-secrets
              key: dsn-staging
        - name: OTLP_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: postgres-collector-config
              key: otlp-endpoint
        - name: NEW_RELIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: postgres-collector-secrets
              key: newrelic-api-key
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        
        livenessProbe:
          httpGet:
            path: /
            port: health
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /
            port: health
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        volumeMounts:
        - name: config
          mountPath: /etc/otelcol
        - name: cache
          mountPath: /var/cache/postgres-collector
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: config
        configMap:
          name: postgres-collector-config
          items:
          - key: collector-config.yaml
            path: config.yaml
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - postgres-collector
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-collector
  namespace: monitoring
  labels:
    app: postgres-collector
spec:
  selector:
    app: postgres-collector
  ports:
  - name: metrics
    port: 8888
    targetPort: 8888
    protocol: TCP
  - name: health
    port: 13133
    targetPort: 13133
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-collector
  namespace: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: postgres-collector
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: postgres-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: postgres-collector
subjects:
- kind: ServiceAccount
  name: postgres-collector
  namespace: monitoring

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-collector-secrets
  namespace: monitoring
type: Opaque
stringData:
  dsn-production: "postgresql://monitor:password@postgres-primary:5432/production?sslmode=require"
  dsn-staging: "postgresql://monitor:password@postgres-staging:5432/staging?sslmode=require"
  newrelic-api-key: "YOUR_NEW_RELIC_LICENSE_KEY"

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-collector
  namespace: monitoring
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: postgres-collector

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: postgres-collector
  namespace: monitoring
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: postgres-collector
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60