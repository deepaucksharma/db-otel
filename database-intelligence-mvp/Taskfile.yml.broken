version: '3'

vars:
  PROJECT_NAME: database-intelligence-collector
  BINARY_NAME: otelcol-db-intelligence
  DIST_DIR: dist
  CONFIG_DIR: config
  DOCKER_REGISTRY: '{{.DOCKER_REGISTRY | default "docker.io"}}'
  DOCKER_ORG: '{{.DOCKER_ORG | default "database-intelligence"}}'
  VERSION: '{{.VERSION | default "latest"}}'

env:
  CGO_ENABLED: 0

tasks:
  default:
    desc: List available tasks
    cmds:
      - task --list-all

  # Setup and installation
  setup:
    desc: Complete development environment setup
    cmds:
      - task: setup:tools
      - task: setup:deps
      - task: setup:env
      - echo "[OK] Development environment ready!"

  setup:tools:
    desc: Install required development tools
    cmds:
      - echo "[INSTALL] Installing development tools..."
      - go install go.opentelemetry.io/collector/cmd/builder@latest || true
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest || true
      - echo "[OK] Tools installed"

  setup:deps:
    desc: Download and verify dependencies
    cmds:
      - echo "[DEPS] Managing Go dependencies..."
      - go mod download
      - go mod verify
      - go mod tidy
      - echo "[OK] Dependencies ready"

  setup:env:
    desc: Create development environment file
    cmds:
      - |
        if [ ! -f .env ]; then
          cp .env.development .env
          echo "[OK] Created .env file from .env.development"
        else
          echo "[INFO] .env file already exists"
        fi

  # Quick start
  quickstart:
    desc: Quick start for new developers
    cmds:
      - task: setup
      - task: fix:all
      - task: build
      - task: dev:up
      - echo "[OK] Database Intelligence Collector is ready!"
      - echo "Access points:"
      - echo "  - Health: http://localhost:13133/"
      - echo "  - Metrics: http://localhost:8888/metrics"

  # Fix commands
  fix:all:
    desc: Fix all known issues
    cmds:
      - task: fix:module-paths
      - task: fix:imports
      - echo "[OK] All fixes applied"

  fix:module-paths:
    desc: Fix module path inconsistencies
    cmds:
      - echo "[FIX] Fixing module paths..."
      - ./fix-module-paths.sh || true
      - echo "[OK] Module paths fixed"

  fix:imports:
    desc: Fix and organize Go imports
    cmds:
      - echo "[FIX] Organizing imports..."
      - goimports -w ./ || true
      - echo "[OK] Imports organized"

  # Build commands
  build:
    desc: Build the collector binary
    vars:
      OUTPUT: '{{.OUTPUT | default (print .DIST_DIR "/" .BINARY_NAME)}}'
    cmds:
      - echo "[BUILD] Building collector..."
      - mkdir -p {{.DIST_DIR}}
      - |
        if command -v builder &> /dev/null; then
          builder --config=otelcol-builder.yaml || echo "[WARN] Build failed - check configuration"
        else
          echo "[ERROR] Builder not found. Run 'task setup:tools' first"
          exit 1
        fi
      - echo "[OK] Build complete"

  build:docker:
    desc: Build Docker image
    vars:
      IMAGE: '{{.DOCKER_REGISTRY}}/{{.DOCKER_ORG}}/{{.BINARY_NAME}}'
      TAG: '{{.TAG | default .VERSION}}'
    cmds:
      - echo "[DOCKER] Building image: {{.IMAGE}}:{{.TAG}}"
      - docker build -t {{.IMAGE}}:{{.TAG}} -t {{.IMAGE}}:latest .
      - echo "[OK] Docker image built"

  # Development environment
  dev:up:
    desc: Start development environment
    cmds:
      - echo "[START] Starting development environment..."
      - docker compose --profile databases up -d
      - echo "[OK] Development environment ready"

  dev:down:
    desc: Stop development environment
    cmds:
      - echo "[STOP] Stopping development environment..."
      - docker compose down
      - echo "[OK] Development environment stopped"

  dev:logs:
    desc: Show development logs
    vars:
      SERVICE: '{{.SERVICE | default "collector"}}'
    cmds:
      - docker compose logs -f {{.SERVICE}}

  dev:reset:
    desc: Reset development environment
    cmds:
      - task: dev:down
      - docker compose down -v
      - echo "[OK] Development environment reset"

  # Running the collector
  run:
    desc: Run collector locally
    deps: [build]
    vars:
      CONFIG: '{{.CONFIG | default (print .CONFIG_DIR "/collector.yaml")}}'
    cmds:
      - echo "[RUN] Running collector..."
      - '{{.DIST_DIR}}/{{.BINARY_NAME}} --config={{.CONFIG}}'

  run:debug:
    desc: Run collector with debug logging
    cmds:
      - task: run
        vars:
          LOG_LEVEL: debug

  # Testing
  test:
    desc: Run all tests
    cmds:
      - task: test:unit
      - echo "[OK] All tests passed"

  test:unit:
    desc: Run unit tests
    cmds:
      - echo "[TEST] Running unit tests..."
      - go test -v ./...
      - echo "[OK] Unit tests passed"

  # Validation
  validate:all:
    desc: Run all validations
    cmds:
      - task: validate:config
      - task: validate:helm
      - task: validate:docker
      - echo "[OK] All validations passed"

  validate:config:
    desc: Validate configuration files
    cmds:
      - echo "[CHECK] Validating configurations..."
      - |
        for file in configs/overlays/*/*.yaml; do
          echo "  Checking: $file"
          yamllint $file || true
        done
      - echo "[OK] Configuration validation complete"

  validate:helm:
    desc: Validate Helm chart
    cmds:
      - echo "[CHECK] Validating Helm chart..."
      - helm lint deployments/helm/db-intelligence/ || true
      - echo "[OK] Helm validation complete"

  validate:docker:
    desc: Validate Docker Compose
    cmds:
      - echo "[CHECK] Validating Docker Compose..."
      - docker-compose config > /dev/null
      - echo "[OK] Docker Compose is valid"

  # Monitoring
  health-check:
    desc: Check collector health
    cmds:
      - |
        echo "[HEALTH] Checking collector health..."
        if curl -sf http://localhost:13133/ > /dev/null; then
          echo "[OK] Collector is healthy"
        else
          echo "[ERROR] Collector is not responding"
          exit 1
        fi

  metrics:
    desc: Show collector metrics
    cmds:
      - echo "[METRICS] Collector metrics:"
      - curl -s http://localhost:8888/metrics | grep -E "^(# TYPE|otelcol_|db_)" | head -20

  # Deployment
  deploy:docker:
    desc: Deploy using Docker
    cmds:
      - task: build:docker
      - docker compose --profile all up -d
      - echo "[OK] Deployed with Docker"

  deploy:helm:
    desc: Deploy using Helm
    vars:
      RELEASE: '{{.RELEASE | default "db-intelligence"}}'
      NAMESPACE: '{{.NAMESPACE | default "monitoring"}}'
      ENV: '{{.ENV | default "development"}}'
    cmds:
      - echo "[K8S] Deploying to Kubernetes..."
      - |
        helm upgrade --install {{.RELEASE}} \
          ./deployments/helm/db-intelligence \
          -f ./deployments/helm/db-intelligence/values-{{.ENV}}.yaml \
          --namespace {{.NAMESPACE}} \
          --create-namespace
      - echo "[OK] Deployed to Kubernetes"

  # Cleanup
  clean:
    desc: Clean all generated files
    cmds:
      - echo "[CLEAN] Cleaning..."
      - rm -rf {{.DIST_DIR}}
      - rm -rf coverage.*
      - rm -rf vendor/
      - find . -name "*.bak" -delete
      - echo "[OK] Cleaned"

  clean:all:
    desc: Clean everything including Docker
    cmds:
      - task: clean
      - task: dev:reset
      - docker rmi {{.DOCKER_REGISTRY}}/{{.DOCKER_ORG}}/{{.BINARY_NAME}}:latest || true
      - echo "[OK] Everything cleaned"