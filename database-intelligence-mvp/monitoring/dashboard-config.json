{
  "name": "Database Intelligence - OpenTelemetry Integration",
  "description": "Comprehensive monitoring for Database Intelligence MVP with New Relic integration validation",
  "permissions": "PUBLIC_READ_WRITE",
  "pages": [
    {
      "name": "Ingestion Validation",
      "description": "Monitor data ingestion and integration errors",
      "widgets": [
        {
          "title": "NrIntegrationError Events",
          "visualization": "line",
          "configuration": {
            "nrql": "SELECT count(*) FROM NrIntegrationError WHERE newRelicFeature = 'Metrics' AND (message LIKE '%database%' OR message LIKE '%otel%') FACET message SINCE 1 hour ago TIMESERIES"
          }
        },
        {
          "title": "Data Ingestion Rate",
          "visualization": "line",
          "configuration": {
            "nrql": "SELECT rate(count(*), 1 minute) as 'Logs/min' FROM Log WHERE instrumentation.provider = 'opentelemetry' AND collector.name = 'database-intelligence' FACET database_name SINCE 1 hour ago TIMESERIES"
          }
        },
        {
          "title": "Cardinality Warnings",
          "visualization": "billboard",
          "configuration": {
            "nrql": "SELECT count(*) FROM NrIntegrationError WHERE message LIKE '%cardinality%' OR message LIKE '%unique time series%' SINCE 1 day ago"
          }
        }
      ]
    },
    {
      "name": "Entity Synthesis",
      "description": "Validate entity creation and correlation",
      "widgets": [
        {
          "title": "Database Entities Created",
          "visualization": "table",
          "configuration": {
            "nrql": "SELECT uniques(entity.guid) as 'Entities', latest(entity.type), latest(entity.name) FROM Log WHERE entity.type = 'DATABASE' FACET database_name SINCE 1 hour ago"
          }
        },
        {
          "title": "Entity Correlation Rates",
          "visualization": "billboard",
          "configuration": {
            "nrql": "SELECT percentage(count(*), WHERE service.name IS NOT NULL) as 'Service %', percentage(count(*), WHERE host.id IS NOT NULL) as 'Host %', percentage(count(*), WHERE entity.guid IS NOT NULL) as 'Entity %' FROM Log WHERE collector.name = 'database-intelligence' SINCE 1 hour ago"
          }
        }
      ]
    },
    {
      "name": "Cardinality Management",
      "description": "Monitor and control cardinality",
      "widgets": [
        {
          "title": "Query Pattern Compression",
          "visualization": "table",
          "configuration": {
            "nrql": "SELECT uniqueCount(db.query.fingerprint) as 'Patterns', uniqueCount(query_text) as 'Raw Queries', percentage(uniqueCount(db.query.fingerprint), uniqueCount(query_text)) as 'Compression %' FROM Log WHERE db.query.fingerprint IS NOT NULL FACET database_name SINCE 1 hour ago"
          }
        },
        {
          "title": "Cardinality Growth Rate",
          "visualization": "line",
          "configuration": {
            "nrql": "SELECT derivative(uniqueCount(db.query.fingerprint), 1 minute) as 'New Patterns/min' FROM Log WHERE db.query.fingerprint IS NOT NULL FACET database_name SINCE 1 hour ago TIMESERIES 1 minute"
          }
        },
        {
          "title": "High Cardinality Attributes",
          "visualization": "bar",
          "configuration": {
            "nrql": "SELECT uniqueCount(username) as 'Users', uniqueCount(application_name) as 'Apps', uniqueCount(client_addr) as 'IPs' FROM Log WHERE database_name IS NOT NULL FACET database_name SINCE 1 hour ago"
          }
        }
      ]
    },
    {
      "name": "Circuit Breaker Status",
      "description": "Monitor circuit breaker health",
      "widgets": [
        {
          "title": "Circuit Breaker States",
          "visualization": "pie",
          "configuration": {
            "nrql": "SELECT filter(count(*), WHERE cb.state = 'open') as 'Open', filter(count(*), WHERE cb.state = 'half-open') as 'Half-Open', filter(count(*), WHERE cb.state = 'closed') as 'Closed' FROM Log WHERE cb.state IS NOT NULL SINCE 30 minutes ago"
          }
        },
        {
          "title": "Database Circuit Status",
          "visualization": "table",
          "configuration": {
            "nrql": "SELECT latest(cb.state) as 'State', sum(cb.opened_count) as 'Opens', average(cb.error_rate) as 'Error Rate' FROM Log WHERE cb.state IS NOT NULL FACET database_name SINCE 1 hour ago"
          }
        },
        {
          "title": "Queries Dropped by Circuit Breaker",
          "visualization": "line",
          "configuration": {
            "nrql": "SELECT sum(cb.queries_dropped) FROM Log WHERE cb.queries_dropped > 0 FACET database_name SINCE 1 hour ago TIMESERIES"
          }
        }
      ]
    },
    {
      "name": "Sampling Effectiveness",
      "description": "Monitor adaptive sampling performance",
      "widgets": [
        {
          "title": "Sampling Decisions by Complexity",
          "visualization": "stacked_bar",
          "configuration": {
            "nrql": "SELECT filter(count(*), WHERE sampling.decision = 'sampled') as 'Sampled', filter(count(*), WHERE sampling.decision = 'dropped') as 'Dropped' FROM Log WHERE sampling.decision IS NOT NULL FACET db.query.complexity SINCE 1 hour ago"
          }
        },
        {
          "title": "Priority Sampling Effectiveness",
          "visualization": "table",
          "configuration": {
            "nrql": "SELECT average(duration_ms) as 'Avg Duration', percentage(count(*), WHERE sampling.decision = 'sampled') as 'Sample %' FROM Log WHERE duration_ms IS NOT NULL FACET CASES(WHERE duration_ms > 1000 as 'Slow', WHERE duration_ms > 500 as 'Medium', WHERE duration_ms <= 500 as 'Fast') SINCE 1 hour ago"
          }
        }
      ]
    },
    {
      "name": "Performance Metrics",
      "description": "Collector and export performance",
      "widgets": [
        {
          "title": "Export Success Rate",
          "visualization": "billboard",
          "configuration": {
            "nrql": "SELECT percentage(sum(otelcol_exporter_sent_metric_points), sum(otelcol_exporter_sent_metric_points) + sum(otelcol_exporter_send_failed_metric_points)) as 'Success Rate' FROM Metric WHERE instrumentation.provider = 'opentelemetry' SINCE 1 hour ago"
          }
        },
        {
          "title": "Batch Size Distribution",
          "visualization": "histogram",
          "configuration": {
            "nrql": "SELECT histogram(otelcol_processor_batch_batch_send_size, 10, 20) FROM Metric WHERE otelcol_processor_batch_batch_send_size IS NOT NULL SINCE 1 hour ago"
          }
        },
        {
          "title": "Export Latency",
          "visualization": "line",
          "configuration": {
            "nrql": "SELECT average(otelcol_exporter_send_duration_milliseconds) as 'Avg', percentile(otelcol_exporter_send_duration_milliseconds, 95) as 'P95' FROM Metric WHERE otelcol_exporter_send_duration_milliseconds IS NOT NULL SINCE 1 hour ago TIMESERIES"
          }
        }
      ]
    },
    {
      "name": "Data Quality",
      "description": "Validate data processing and quality",
      "widgets": [
        {
          "title": "PII Sanitization Check",
          "visualization": "billboard",
          "configuration": {
            "nrql": "SELECT count(*) as 'Potential PII Leaks' FROM Log WHERE query_text RLIKE '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}' OR query_text RLIKE '\\b\\d{3}-\\d{2}-\\d{4}\\b' SINCE 1 hour ago"
          }
        },
        {
          "title": "Query Normalization Rate",
          "visualization": "billboard",
          "configuration": {
            "nrql": "SELECT percentage(count(*), WHERE db.query.normalized IS NOT NULL) as 'Normalization Rate' FROM Log WHERE query_text IS NOT NULL SINCE 1 hour ago"
          }
        }
      ]
    }
  ]
}